generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id String @id @default(uuid())
  phone String? @unique()
  email String? @unique()
  name String
  avatar String?
  tokens Token[]
  products Product[]
  favs Fav[]
  posts Post[]
  answers Answer[]
  wonderings Wondering[]
  writtenReviews Review[]    @relation(name: "writtenReviews")
  receivedReviews Review[]    @relation(name: "receivedReviews")
  sales Sale[]
  purchases Purchase[]
  streams Stream[]
  messages Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Token {
  id String @id @default(uuid())
  payload String @unique()
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(uuid())
  image String
  name String
  price Int
  description String @db.MediumText
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  favs Fav[]
  sales       Sale[]
  purchases   Purchase[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Fav {
  id String @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id String @id @default(uuid())
  question String @db.MediumText
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  answers Answer[]
  wondering Wondering[]
  latitude Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id String @id @default(uuid())
  answer String @db.MediumText
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wondering {
  id String @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id String @id @default(uuid())
  review String @db.MediumText
  createdBy User @relation(name:"writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  creeatedFor User @relation(name:"receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId String
  score Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale {
  id String @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id String @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id String @id @default(uuid())
  name String
  description String @db.MediumText
  price Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  messages Message[]
  cloudflareId String
  cloudflareUrl String
  cloudflareKey String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id String @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String   @db.MediumText
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}